{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About Documentation Site","text":"<p>This is a MkDocs-powered documentation site for DevOps materials.</p>"},{"location":"#mkdocs-and-site-template","title":"MKDocs and site template","text":"<ol> <li>MKDocs</li> <li>Site Template</li> <li>GitHub Avatar Setup</li> <li>Installation Guide</li> <li>init_site.sh Script</li> </ol>"},{"location":"#fundamentals","title":"Fundamentals","text":"<ol> <li>What is DevOps</li> <li>DevOps Frameworks</li> <li>Other Concepts</li> <li>Microservices</li> <li>Operating Systems</li> <li>Networking</li> <li>Software Development</li> <li>Cloud Computing</li> </ol>"},{"location":"#tutorials","title":"Tutorials","text":"<ol> <li>Containerization</li> <li>CI/CD</li> <li>Cloud Providers</li> <li>Infrastructure as Code</li> <li>Monitoring</li> </ol>"},{"location":"#git","title":"Git","text":"<ol> <li>Git</li> <li>GitHub</li> <li>GitLab</li> <li>Bitbucket</li> </ol>"},{"location":"#programming","title":"Programming","text":"<ol> <li>Bash</li> <li>PowerShell</li> <li>Python</li> <li>Go</li> <li>Ruby</li> <li>JavaScript</li> <li>Groovy</li> </ol>"},{"location":"fundamentals/","title":"Fundamentals","text":"<p>Key basic concepts to understand in order to start the DevOps roadmap.</p>"},{"location":"fundamentals/#topics","title":"Topics","text":""},{"location":"fundamentals/#what-is-devops","title":"What is DevOps","text":"<ul> <li>The DevOps lifecycle</li> <li>DevOps practices</li> <li>5 Key DevOps principles</li> <li>DevOps Engineer</li> <li>How to do DevOps</li> <li>Operational Readiness</li> </ul>"},{"location":"fundamentals/#devops-frameworks","title":"DevOps Frameworks","text":"<ul> <li>CALMS Framework</li> <li>Team Topologies</li> <li>Team structures</li> <li>DevOps Metrics</li> <li>DORA Metrics</li> </ul>"},{"location":"fundamentals/#other-concepts","title":"Other Concepts","text":"<ul> <li>Agile and Scrum</li> <li>SRE - Site Reliability Engineering</li> <li>DevSecOps</li> <li>Platform Engineering</li> </ul>"},{"location":"fundamentals/#microservices","title":"Microservices","text":"<ul> <li>Overview</li> <li>Microservices vs. monolithic architecture</li> <li>How to build microservices</li> <li>Distributed System</li> <li>Kubernetes vs. Docker</li> <li>Configuration management</li> <li>How to tame software sprawl</li> <li>Negative velocity: how to lift the complexity limit</li> <li>Configuration management tools</li> <li>SOA vs. microservices</li> <li>Microservices Tools</li> </ul>"},{"location":"fundamentals/#cloud-computing","title":"Cloud Computing","text":"<ul> <li>Containers vs. virtual machines</li> <li>Virtual Machine</li> <li>Infrastructure as Code (IaC)</li> <li>Infrastructure as a service (IaaS)</li> <li>Platform as a service (PaaS)</li> <li>Containers as a service (CaaS)</li> <li>Cloud bursting</li> <li>Benefits of Microservices</li> <li>Microservices security</li> <li>Microservices vs. Web services</li> <li>Microservices design patterns</li> </ul>"},{"location":"fundamentals/#operating-systems","title":"Operating Systems","text":"<ul> <li>Operating System Basics</li> <li>Networks Basics</li> <li>Linux OS</li> <li>Linux Bash Utilities</li> <li>Bash Scripting in Linux</li> <li>Linux File Directories</li> <li>Linux File Permissions</li> <li>SSH Key Management</li> <li>Vim Editor</li> </ul>"},{"location":"fundamentals/#networking","title":"Networking","text":"<ul> <li>Internet</li> <li>OSI Model</li> <li>Protocols</li> <li>IP &amp; Ports</li> <li>(DNS) Domain Name System</li> <li>HTTP/HTTPS</li> <li>Load Balancers</li> </ul>"},{"location":"fundamentals/#software-development","title":"Software Development","text":"<ul> <li>Overview</li> <li>The Software Development Life Cycle (CDLC)</li> <li>Methodologies (Agile \u2192 Scrum \u2192 jira)</li> <li>Models and tools</li> <li>Software team collaboration</li> </ul>"},{"location":"fundamentals/cloud-computing/","title":"Cloud Computing","text":"<p>Cloud computing is the delivery of computing resources \u2014 including storage, processing power, databases, networking, analytics, artificial intelligence, and software applications \u2014 over the internet (the cloud). By outsourcing these resources, companies can access the computational assets they need, when they need them, without needing to purchase and maintain a physical, on-premise IT infrastructure. This provides flexible resources, faster innovation, and economies of scale.</p>"},{"location":"fundamentals/cloud-computing/#characteristics-of-cloud-computing","title":"Characteristics of cloud computing","text":"<p>\u2022 On-demand self service - Cloud computing providers offer APIs that users access to requisition new resources or scale existing resources whenever needed. Teams can automate their infrastructure provisioning in a simple way with infrastructure as code tools from the likes of Terraform and Ansible.</p> <p>\u2022 Broad network access - Physical hardware location is a significant concern when delivering the optimal end-user experience. Cloud computing provides a huge boon by offering globally-distributed physical hardware, which allows organizations to strategically provision location-targeted hardware.</p> <p>\u2022 Resource pooling - Computing resources in a cloud infrastructure platform are dynamically divided and allocated on demand. Since a cloud host\u2019s physical machines are dynamically provisioned and shared between multiple tenants, cloud hardware is thoroughly optimized for maximum usage.</p> <p>\u2022 Rapid elasticity - Cloud infrastructures can grow and shrink dynamically, allowing users to request that their computational resources auto-scale with traffic demands. Elasticity can happen on a per-machine basis, where an allocation of resources grows to maximize the available machine resources, or multi-machine basis, in which an application automatically scales to multi-networked machines.</p> <p>\u2022 Measured service - Cloud infrastructure providers give detailed usage metrics that are used to communicate usage costs. For example, Amazon Web Services (AWS) provides usage for each service category in hourly or daily line items. Cloud service providers generally take a utility style pay-as-you-go billing model that is measured and delivered, so customers are charged for the exact amount of computing resources used.</p>"},{"location":"fundamentals/cloud-computing/#types-of-cloud-deployments","title":"Types of cloud deployments","text":"<p>There are three primary types of cloud deployments. Each has unique benefits and organizations often benefit from using more than one.</p> <p>Public cloud</p> <p>Deliver computing resources \u2013 servers, storage, applications, etc. \u2013 over the internet from a cloud service provider, such as AWS and Microsoft Azure. Cloud providers own and operate all hardware, software, and other supporting infrastructure.</p> <p>Private cloud</p> <p>A private cloud is computing resources dedicated exclusively to an organization. It can be physically located at an organization\u2019s on-site data center, or hosted by a cloud provider. A private cloud delivers a higher level of security and privacy than public clouds by offering dedicated resources to companies.</p> <p>Private cloud customers get the primary benefits of a public cloud, including self-service, scalability, and elasticity, but with the added benefit of additional control and customization. Plus, private clouds can have a higher level of security and privacy because they are housed on private networks not accessible to public traffic.</p> <p>Hybrid cloud</p> <p>Combination of private and public clouds (for example, IBM Hybrid Cloud, powered by Red Hat), connected together with technology that enables data and application to work together. Sensitive services and applications can be kept in the secure private cloud while publicly-accessible web servers and customer-facing endpoints can live in the public cloud. Most popular third-party cloud providers offer a hybrid cloud model, allowing users to combine private and public clouds to satisfy their needs. This allows businesses greater flexibility to deploy the specific infrastructure requirements of their application.</p>"},{"location":"fundamentals/cloud-computing/#cloud-computing-services","title":"Cloud computing services","text":"<p>The dynamic properties of cloud computing set the foundation for higher-level services that are essential for agile and DevOps teams.</p> <p></p> <p>The main categories are:</p> <ol> <li> <p>Infrastructure as a Service (IaaS) - A foundational cloud service layer that allows organizations to rent IT infrastructure \u2013 servers, storage, networks, operating systems \u2013 from a cloud provider. IaaS lets users reserve and provision the resources they need out of raw physical server warehouses. In addition, IaaS lets users reserve pre-configured machines for specialized tasks like load balancers, databases, email servers, distributed queues.</p> <p>Usage</p> <p>DevOps teams can use IaaS as an underlying platform from which to build a DevOps toolchain, which can include the use of various third-party tools.</p> </li> <li> <p>Platform as a Service (PaaS) - PaaS is built on IaaS and provides resources to build user-level tools and applications. It includes compute, network, and storage resources, as well as development tools, database management systems, and middleware.</p> <p>PaaS automatically allocates resources for popular tech stacks (e.g., Ruby on Rails, Java Spring MVC, MEAN, JAM).</p> <p>Usage</p> <p>Teams can upload application code artifacts that are automatically deployed, allowing them to focus on business logic rather than infrastructure. PaaS handles scaling and monitoring based on traffic loads.    </p> </li> <li> <p>Software as a Service (SaaS) - SaaS delivers software applications over the internet, typically on-demand and by subscription. Providers host and manage the application, including upgrades and security patching.</p> </li> <li> <p>Function as a Service (FaaS) - FaaS offers a platform for customers to develop, run, and manage applications without maintaining infrastructure. Cloud providers execute code blocks, return results, and then destroy the resources used. This model enables rapid development and deployment of event-driven applications.</p> </li> </ol>"},{"location":"fundamentals/devops-frameworks/","title":"DevOps Framework","text":"<p>Like every movement or philosophy, DevOps frameworks guide practitioners to implement the practices effectively and efficiently.</p>"},{"location":"fundamentals/devops-frameworks/#calms-framework","title":"CALMS Framework","text":"<p>The CALMS Framework (Culture, Automation, Lean, Measurement, Sharing) assesses a company\u2019s ability to adopt DevOps and measures success during transformation.</p> <p>Culture</p> <ul> <li>DevOps is a culture change focused on collaboration.</li> <li>Product-oriented teams (development, QA, product management, design, operations, etc.) work together.</li> <li>Collaboration is fostered by sharing goals and planning together.</li> <li>Incident post-mortems focus on improvement, not blame.</li> <li>DevOps is everyone\u2019s job, not just one team\u2019s.</li> </ul> <p>Automation</p> <ul> <li>Eliminates manual work, creates reliable systems, and enables repeatable processes.</li> <li>Start with build, test, deploy, and provisioning automation.</li> <li>Continuous delivery and configuration as code break down barriers between development and operations.</li> <li>Automated deployments and tests catch bugs and security flaws early.</li> </ul> <p>Lean</p> <ul> <li>Focus on continuous improvement and embracing failure.</li> <li>Hold regular retrospectives and experiment with new approaches.</li> <li>Failure is inevitable; build for fast detection and recovery.</li> <li>Postmortems strengthen processes, not punish individuals.</li> </ul> <p>Measurement</p> <ul> <li>Use data to prove improvement and guide decisions.</li> <li>Start with basics: time to deploy, bug frequency, recovery time, user metrics.</li> <li>Share metrics across teams to build consensus and support roadmaps.</li> </ul> <p>Sharing</p> <ul> <li>DevOps transformation requires practices, culture, and tools.</li> <li>Sharing responsibility and success bridges the gap between development and operations.</li> <li>\u201cYou build it, you run it\u201d (YBIYRI) encourages hands-on collaboration.</li> <li>Peer-reviewed code and rotating support roles build trust and mutual respect.</li> </ul>"},{"location":"fundamentals/devops-frameworks/#you-build-it-you-run-it-ybiyri","title":"You Build It, You Run It (YBIYRI)","text":"<ul> <li>The phrase \u201cyou built it, you run it\u201d fosters a hands-on approach across teams.</li> <li>Developers and operators pair throughout the application lifecycle, not just as separate roles.</li> <li>Peer-reviewed code and products lead to better delivery and performance.</li> <li>Rotating support roles help developers address urgent customer issues and learn how the application is used in the wild.</li> <li>High availability and collaboration between development and operations build trust and mutual respect.</li> </ul>"},{"location":"fundamentals/devops-frameworks/#devops-metrics","title":"DevOps Metrics","text":"<p>DevOps practitioners rely on four key metrics, developed by DORA, to measure the efficacy of their DevOps practices.</p> <p>DevOps metrics are data points that directly reveal the performance of a DevOps software development pipeline and help quickly identify and remove any bottlenecks in the process.</p> <p>These metrics can be used to track both technical capabilities and team processes. At its core, DevOps focuses on blurring the line between development and operations teams, enabling greater collaboration between developers and system administrators.</p> <p>Metrics allows DevOps teams to measure and assess collaborative workflows and track progress of achieving high-level goals including increased quality, faster release cycles, and improved application performance.</p>"},{"location":"fundamentals/devops-frameworks/#four-critical-devops-metrics","title":"Four critical DevOps metrics","text":"<p>Though there are numerous metrics used to measure DevOps performance, the following are four key metrics every DevOps team should measure.</p> <ol> <li> <p>Lead time for changes - The length of time between when a code change is committed to the trunk branch and when it is in a deployable state. For example, when code passes all necessary pre-release tests.</p> </li> <li> <p>Change failure rate - The change failure rate is the percentage of code changes that require hot fixes or other remediation after production. This does not measure failures caught by testing and fixed before code is deployed.</p> </li> <li> <p>Deployment frequency - Understanding the frequency of how often new code is deployed into production is critical to understanding DevOps success. Many practitioners use the term \u201cdelivery\u201d to mean code changes that are released into a pre-production staging environment, and reserve \u201cdeployment\u201d to refer to code changes that are released into production.</p> </li> <li> <p>Mean time to recovery - Mean time to recovery (MTTR) measures how long it takes to recover from a partial service interruption or total failure. This is an important metric to track, regardless of whether theinterruption is the result of a recent  deployment or an isolated system failure.</p> </li> </ol>"},{"location":"fundamentals/microservices/","title":"Microservices","text":"<p>Microservices architecture splits applications into smaller, independent services based on business functionalities. Each service is self-contained, developed, deployed, and scaled separately, enabling loose coupling and independent versioning.</p>"},{"location":"fundamentals/microservices/#monolithic-architecture","title":"Monolithic Architecture","text":"<p>A monolithic architecture is a traditional model of a software program, which is built as a unified unit that is self-contained and independent from other applications. The word \u201cmonolith\u201d is often attributed to something large and glacial, which isn\u2019t far from the truth of a monolith architecture for software design.</p> <p>A monolithic architecture is a singular, large computing network with one code base that couples all of the business concerns together. To make a change to this sort of application requires updating the entire stack by accessing the code base and building and deploying an updated version of the service-side interface. This makes updates restrictive and time-consuming.</p> <p>Challenges of Monolithic Architecture</p> <ul> <li>Application is too large and complex</li> <li>Components are tightly coupled</li> <li>Can only scale the entire app, not individual services</li> <li>Difficulty managing different dependency versions</li> <li>Longer release process</li> <li>Every change requires testing and redeploying the whole application</li> <li>Bugs in any module can bring down the entire app</li> </ul>"},{"location":"fundamentals/microservices/#microservices-benefits","title":"Microservices Benefits","text":"<p>Why Microservices?</p> <ul> <li>Separation of concern: one service for one specific job</li> <li>Independent development, deployment, and scaling</li> <li>Loosely coupled services</li> <li>Each microservice has its own version</li> </ul>"},{"location":"fundamentals/microservices/#communication-between-microservices","title":"Communication Between Microservices","text":"<ul> <li>Synchronous (API calls): Services communicate via HTTP requests and responses to API endpoints.</li> <li>Asynchronous (Message Broker): Services send messages to a broker (e.g., RabbitMQ), which forwards them to the target service.</li> <li>Service Mesh: External service (e.g., Istio, Consul) manages communication logic, offloading it from microservices.</li> </ul> <p>Distributed System Challenges</p> <ul> <li>Configuring communication between services (handling downtime, retries)</li> <li>Monitoring multiple instances across servers</li> <li>Added complexity due to distribution</li> <li>Tools: Messaging, Service Mesh, Monitoring, Security, Containers, Orchestration</li> </ul>"},{"location":"fundamentals/microservices/#monorepo-vs-polyrepo","title":"Monorepo vs Polyrepo","text":""},{"location":"fundamentals/microservices/#monorepo-single-repository","title":"Monorepo (Single Repository)","text":"<p>Monorepo Advantages</p> <ul> <li>One Git repository for all projects/services</li> <li>Easier code management and development</li> <li>Shared code and configuration</li> <li>Changes tracked, tested, and released together</li> </ul> <p>Monorepo Challenges</p> <ul> <li>Tight coupling of projects</li> <li>Large codebase slows git operations</li> <li>Additional logic needed for selective builds/deploys</li> <li>Issues can affect all projects/teams</li> </ul>"},{"location":"fundamentals/microservices/#polyrepo-multiple-repositories","title":"Polyrepo (Multiple Repositories)","text":"<p>Polyrepo Advantages</p> <ul> <li>One repository per service</li> <li>Code is isolated; work on each service separately</li> <li>Better access control and isolation</li> <li>Each repository has its own pipeline</li> </ul> <p>Polyrepo Challenges</p> <ul> <li>Cross-cutting changes are harder</li> <li>Changes across projects require separate merge requests</li> <li>Tedious switching between projects</li> <li>More difficult searching, testing, debugging, and sharing resources</li> </ul> <p>General rule: Use monorepo for smaller microservice applications; use polyrepo for separate teams, better isolation, and independent pipelines.</p>"},{"location":"fundamentals/microservices/#best-practices-for-managing-microservices","title":"Best Practices for Managing Microservices","text":"<ul> <li>Single-Responsibility Principle (SRP): Each module or microservice should have only one function. SRP and continuous integration (CI) automate code quality checks before merging, improving velocity and reducing the need for separate QA. CI precedes continuous delivery (CD), which keeps software ready to deploy.</li> <li>API Gateways: Simplify communication between microservices, manage authentication and authorization, and boost security.</li> <li>Asynchronous Communication: Preserves autonomy and reduces dependencies that might slow application function.</li> <li>Versioning Microservices: Critical when implementing breaking changes (e.g., removing an operation). Versioning smooths transitions and minimizes service disruption.</li> </ul>"},{"location":"fundamentals/networking/","title":"Networking","text":"<p>Network - Two or more computers or devices that are linked in order to share information.</p> <p>Networking refers to a large set of standards and protocols that organize and regulate the sharing of information.</p>"},{"location":"fundamentals/networking/#glossary","title":"Glossary","text":"<p>The Internet - Refers to the actual network of connected computing devices.</p> <p>The World Wide Web - Collection of interlinked websites and other web resources that use the internet to share data.</p> <p>The Client-Server Model - Describes how the flow of data is transferred on the internet.</p> <p>Web 2.0 Applications - Provide a dynamic user experience by:</p> <ul> <li>Responding to user input without having to reload the page</li> <li> <p>Emphasizing user-generated content and social sharing.</p> <p>FYI</p> <p>This was made possible through technical advances such as JQuery and web frameworks.</p> </li> </ul> <p>TCP/IP - Transmission Control Protocol and Internet Protocol (TCP/IP) are standards for data transfer which allow networks all over the globe to communicate with each other.</p>"},{"location":"fundamentals/networking/#osi-model","title":"OSI Model","text":"<p>Open Systems Interconnection is a conceptual, implementation-neutral model that describes networking in seven separate layers, where each layer covers a set of functions and tasks. This model helps us communicate while we do network troubleshooting and architecture.</p> <p>TCP/IP Model - An implementation-specific networking model that revolves around the TCP protocol and IP addressing which anchor the Internet as we know it.</p> <p>OSI vs TCP/IP</p> <p>OSI layers include:</p> Layer Description Physical Includes physical technologies Data Link Data framing and local MAC addressing Network Connecting to the larger web and IP addressing Transport Protocols that make sure reliable delivery happens Session Authenticates and maintains communication over a period of time Presentation En/decrypts and translates data into presentable form Application All the applications we interact with that render data <p>TCP/IP layers:</p> <ul> <li>The Network Layer</li> <li>The Internet Layer</li> <li>The Transport Layer</li> <li>The Application Layer</li> </ul>"},{"location":"fundamentals/networking/#network-categories","title":"Network Categories","text":"<ul> <li>LAN (Local Area Network) - a smaller-sized network that connects multiple devices in a small area</li> <li>CAN (Campus Area Network) - a larger network that connects multiple computers and devices over a slightly larger area</li> <li>WAN (Wide Area Network) -  the largest-sized network that connects multiple computers, over a geographically large area. The Internet is technically a WAN.</li> </ul>"},{"location":"fundamentals/networking/#network-protocols","title":"Network Protocols","text":"<p>Set of standards for Internet traffic.</p> Protocol Purpose/Description TCP and UDP Transport protocols for reliable and fast delivery HTTP Web requests DNS Convert domain names to IP addresses IMAP/POP3 Email SSH Secure remote access FTP File transfer SMB Access to specific resources"},{"location":"fundamentals/operating-systems/","title":"Operating Systems","text":"<p>The operating system (OS) is system software that manages the basic functionalities of a computer and is responsible for tasks such as process management, memory management, file system management, IO management, networking, security, and providing a user interface.</p>"},{"location":"fundamentals/operating-systems/#hardware-glossary","title":"Hardware Glossary","text":"<ul> <li> <p>Binary Numbering System - Built on a base of 2. Every time we reach a power of 2, we add another digit. The decimal system works the same way, just with 10.</p> </li> <li> <p>Control Unit (CU) \u2013 On a CPU receives information from the software; then, it distributes and directs the data to the relevant hardware components.</p> <p>Some functions of the CU</p> <ul> <li>Determine what/where the next instruction must go for processing</li> <li>Send clock signals to all hardware to force synchronous operations</li> <li>Send memory taskings if appropriate</li> </ul> </li> <li> <p>Arithmetic and Logic Unit (ALU) - A digital circuit used to perform arithmetic and logic operations. It is the fundamental building block of the CPU.</p> <p>Some ALU functions</p> <ul> <li>Addition &amp; subtraction</li> <li>Determining equality</li> <li>AND/OR/XOR/NOR/NOT/NAND logic gates and more!</li> </ul> </li> <li> <p>Registers \u2013 A volatile memory system that provides the CPU with rapid access to information it is immediately using.</p> <p>Functions of a register</p> <ul> <li>Store temporary data for immediate processing by the ALU</li> <li>Hold \u201cflag\u201d information if an operation results in overflow or triggers other flags</li> <li>Hold the location of the next instruction to be processed by the CPU</li> </ul> </li> <li> <p>The CPU - A Central Processing Unit (CPU) is the electronic circuitry that executes instructions based on an input of binary data (0\u2019s and 1\u2019s). The CPU consists of the <code>Control Unit (CU)</code>, the <code>Arithmetic and Logic Unit (ALU)</code>, and <code>registers (Immediate Access Store)</code>.</p> </li> <li> <p>Random Access Memory (RAM) - Additional high-speed memory that a computer uses to store and access information on a short-term basis.</p> </li> <li> <p>Hard Disks / hard drives - Responsible for the long-term, or secondary storage of data and programs.</p> </li> <li> <p>The Mainboard / motherboard - Printed circuit board that houses important hardware components via ports.</p> </li> <li> <p>Ports \u2013 A physical outlet used to connect devices to a computer. A computer typically contains multiple ports.</p> </li> <li> <p>Main Functions of a Computer - There are 4 main functions of a computer that make user interaction possible:</p> <ol> <li>Input - Data we give to our computers through interactions.</li> <li>Processing - Comprised of the translation of input and the instructions given for output.</li> <li>Memory - Used to store either temporary or permanent information.</li> <li>Output - The information that gets returned by the computer.</li> </ol> </li> <li> <p>Throughput Measure - Throughput is the total amount of data that can be transferred in a given amount of time.</p> <p>Some common throughput numbers</p> <ul> <li>Smartphones: 500MB/Sec</li> <li>Desktop drive: 5,000MB/Sec</li> <li>RAM: 20,000MB/Sec</li> </ul> </li> <li> <p>Latency Measure - Latency is the amount of delay before that transfer of data begins.</p> <p>Some common latency numbers</p> <ul> <li>Read from solid state drive: 150 microseconds</li> <li>Ethernet connection: 10 milliseconds</li> <li>4G connection: 80 milliseconds</li> <li>Satellite connection: 900 milliseconds</li> </ul> </li> <li> <p>CPU and GPU Measures - Both CPUs and GPUs have similar measures for computation performance. Each is made up of cores that can do one operation at a time, and these cores have set clock speeds that determine how often they can perform these operations.</p> </li> <li> <p>Power Consumption Measure - The energy devices use is measured in watts. The greater the wattage, the greater the amount of heat the device creates. Electricity costs can be a substantial part of the cost over the lifetime of the device.</p> </li> </ul>"},{"location":"fundamentals/operating-systems/#system-glossary","title":"System Glossary","text":"<ul> <li> <p>Bios (basic input/output system) \u2013 A firmware used to provide runtime services for operating systems and programs and to perform hardware initialization during the booting process. It is a program the computer\u2019s microprocessor uses to start the computer system after it is powered on. It also manages data flow between the computer\u2019s operating system (OS) and attached devices, such as the hard disk, video adapter, keyboard, mouse and printer.</p> </li> <li> <p>Boot Loader - A computer program that is responsible for booting a computer. If it also provides an interactive menu with multiple boot choices then it\u2019s often called a boot manager.</p> </li> <li> <p>RAM (Random-access memory) \u2013 A form of electronic computer memory that can be read and changed in any order, typically used to store working data and machine code.</p> </li> <li> <p>ROM (Read-only memory) \u2013 A type of non-volatile memory used in computers and other electronic devices. Data stored in ROM cannot be electronically modified after the manufacture of the memory device. Read-only memory is useful for storing software that is rarely changed during the life of the system, also known as firmware.</p> </li> <li> <p>CPU (central processing unit) \u2013 A hardware component that\u2019s the core computational unit in a server. Servers and other smart devices convert data into digital signals and perform mathematical operations on them. The CPU is the primary component that processes the signals and makes computing possible. Its electronic circuitry executes instructions of a computer program, such as arithmetic, logic, controlling, and input/output (I/O) operations.</p> </li> <li> <p>Binary / Octal / Hexadecimal</p> <ul> <li>Decimal represent any number using 10 digits [0\u20139].</li> <li>Binary represent any number using 2 digits [0\u20131].</li> <li>Octal represent any number using 8 digits [0\u20137].</li> <li>Hexadecimal represent any number using 10 digits and 6 characters [0\u20139, A, B, C, D, E, F].</li> </ul> </li> <li> <p>Kernel - A computer program at the core of a computer\u2019s operating system and generally has complete control over everything in the system. The kernel is also responsible for preventing and mitigating conflicts between different processes. It is the portion of the operating system code that is always resident in memory and facilitates interactions between hardware and software components.</p> </li> <li> <p>System Call \u2013 A programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. A system call is a way for programs to interact with the operating system. This may include hardware-related services (for example, accessing a hard disk drive or accessing the device\u2019s camera), creation and execution of new processes, and communication with integral kernel services such as process scheduling. System calls provide an essential interface between a process and the operating system.</p> </li> <li> <p>Bits .vs. Bytes</p> <p>A bit (Binary Digit) is the smallest most basic unit of information in computing and digital communications. It\u2019s essentially a single binary data point, represents a logical state with one of two possible values. Either yes or no, on or off, up or down.</p> <p>A byte on the other hand is a unit of memory that usually contains 8 bits. This is because historically, 8 bits are needed to encode a single character of text. For this reason it is the smallest addressable unit of memory in many computer architectures.</p> </li> </ul>"},{"location":"fundamentals/operating-systems/#file-system","title":"File System","text":"<p>The data structure used by the operating system to store and retrieve data.</p> <ul> <li> <p>Filesystem File - A file is a unit of storage used to describe a self-contained piece of data and can have a variety of possible formats based on what that file contains.</p> </li> <li> <p>Filesystem Directory - A directory is a data structure that contains references to files and other directories. They are typically organized in a hierarchical tree structure called a directory tree.</p> </li> <li> <p>Working Directory - Also called a current directory, is the directory associated with the execution of a process.</p> </li> <li> <p>File Attributes - Collection of metadata that determine how files behave, such as if they are hidden or compressed.</p> </li> <li> <p>File Permissions - Determine which users and groups can read, write, and execute the file.</p> </li> <li> <p>File Control Block - Contains the metadata for a file, such as permissions and access times.</p> </li> <li> <p>File and Directory Operations - Both files and directories can be created, opened, read, written, deleted, closed, linked, unlinked, listed and truncated. It is possible to move across directories as well as find files within directories.</p> </li> <li> <p>Filesystem Layers - The filesystem has multiple layers of abstraction: The applications, logical file system, File-organization module, basic file system, IO control, and devices.</p> </li> </ul>"},{"location":"fundamentals/other-concepts/","title":"Other concepts","text":"<p>This section overviews Agile &amp; Scrum, SRE, DevSecOps, Platform Engineering and Cloud Engineering.</p>"},{"location":"fundamentals/other-concepts/#agile","title":"Agile","text":"<p>Agile is an iterative approach to project management and software development that focuses on collaboration, customer feedback, and rapid releases. It arose in the early 2000s from the software development industry, helping development teams react and adapt to changing market conditions and customer demands.</p> <p>In an agile approach, some planning and design is done upfront, but the development proceeds in small batches and involves close collaboration with stakeholders. Changes are incorporated continuously and a usable version of a product is often released quicker compared to products developed through the waterfall methodology. This provides many benefits, with arguably the most important being that if software doesn\u2019t meet the needs or expectations of the customer, it can be remediated in real-time.</p> <p>Agile is a collection of methodologies, not a single approach to development. It is an aggregation of scrum, eXtreme Programming (XP), and other systems of practice that developers used in years prior, and resulted from those practitioners coming together to unify these approaches into a single set of principles. The result of this unification effort was the Agile Manifesto, which consists of 12 principles, based on four core values:</p> <p>The Agile Manifesto\u2019s four core values</p> <ol> <li>Individuals and interactions - over processes and tools</li> <li>Working software - over comprehensive documentation</li> <li>Customer collaboration - over contract negotiation</li> <li>Responding to change - over following a plan</li> </ol> <p>Agile Principles</p> <p>The values are based on these principles:</p> <ol> <li>Customer satisfaction by early and continuous delivery of valuable software.</li> <li>Welcome changing requirements, even in late development.</li> <li>Deliver working software frequently (weeks rather than months).</li> <li>Close, daily cooperation between business people and developers.</li> <li>Projects are built around motivated individuals, who should be trusted.</li> <li>Face-to-face conversation is the best form of communication (co-location).</li> <li>Working software is the primary measure of progress.</li> <li>Sustainable development, able to maintain a constant pace.</li> <li>Continuous attention to technical excellence and good design.</li> <li>Simplicity\u2014the art of maximizing the amount of work not done\u2014is essential.</li> <li>Best architectures, requirements, and designs emerge from self-organizing teams.</li> <li>Regularly, the team reflects on how to become more effective, and adjusts accordingly.</li> </ol> <p>Enter DevOps - DevOps is an approach to software development that enables teams to build, test, and release software faster and more reliably by incorporating agile principles and practices, such as increased automation and improved collaboration between development and operations teams. Development, testing, and deployment occur in both agile and DevOps. Yet traditional agile stops short of operations, which is an integral part of DevOps.</p>"},{"location":"fundamentals/other-concepts/#scrum","title":"Scrum","text":"<p>Scrum prescribes for teams to break work into goals to be completed within time-boxed iterations, called sprints. Each sprint is no longer than one month and commonly lasts two weeks. The scrum team assesses progress in time-boxed, stand-up meetings of up to 15 minutes, called daily scrums. At the end of the sprint, the team holds two further meetings: one sprint review to demonstrate the work for stakeholders and solicit feedback, and one internal sprint retrospective. A person in charge of a scrum team is typically called a scrum master.</p>"},{"location":"fundamentals/other-concepts/#sre-site-reliability-engineering","title":"SRE - Site Reliability Engineering","text":"<p>SRE is a discipline in the field of Software Engineering and IT infrastructure support that monitors and improves the availability and performance of deployed software systems and large software services. There is typically a focus on automation and an infrastructure as Code methodology.</p> <p>SRE vs DevOps</p> <p>SRE is considered a specific implementation of DevOps;[14] focusing specifically on building reliable systems, whereas DevOps covers a broader scope of operations.</p>"},{"location":"fundamentals/other-concepts/#sla-service-level-agreement","title":"SLA (Service Level Agreement)","text":"<p>SLA is a commitment between service provider and customer. SLA is expressed as percentage % of availability/error, how often the system is up and how often it\u2019s down. Very few services need 100% SLA, Achieving it is difficult and expensive. SLA usually defined by the number of 9s (\u201c4 nines\u201d: 99.99%).</p> <p>Engineers and business people who are the end users decides how much downtime is acceptable or how many requests must be successful, according to market benchmarks, user feedbacks, competition, etc\u2026</p> <p>Engineers will define SLAs on technical level and integrate them into DevOps &amp; SRE processes, while business people will define SLAs on a higher level.</p>"},{"location":"fundamentals/other-concepts/#devsecops","title":"DevSecOps","text":"<p>Developers wants to deploy new version to the app, fast and without manual effort. Typical CI/CD pipeline for that process is Automated tests \u2192 Build \u2192 Deploy test \u2192 Automated tests \u2192 Deploy Production.</p> <p>What about security tests? Problems may arise when using vulnerable/outdated 3rd party libraries, licensing issues, sensitive data leaks, vulnerable docker base image, K8s misconfiguration, etc\u2026</p> <p>Using microservices, cloud platforms, containers, Kubernetes increases attacks surface. This is why we need to add security to the DevOps process. <code>DevSecOps = Development, Security, Operations</code>. With this philosophy, developers are also responsible for security, and security teams becomes advisors for Dev and Ops teams.</p> <p>Security teams needs to create security policies, select automation tools for detecting security issues and train the developers and operations. DevSecOps tools:</p> <p></p> <p>DevSecOps CI/CD pipeline: Pre-commit hooks \u2192 Pre-Build \u2192 SCA SAST \u2192 Post-Build \u2192 DAST \u2192 Deploy test \u2192 Security in IaC \u2192 Deploy Production.</p> <p>SAST (Static Application Security Testing) tests</p> <p>Validate the application code with static code analysis (app is not running). Problems may arise when the app executes user input without validating. Do we allow SQL injections? Are we using weak or outdated encryption algorithm for passwords? Cross-site scripting? SAST identifies security vulnerabilities in app\u2019s source code, configuration files etc. It also looks for common coding errors, deviation from source coding practices and more.</p> <p>Secret scanning</p> <p>Using tools to scan the source code for any hard coded secrets: API keys, private keys, passwords, tokens and authentication files of various platforms.</p> <p>SCA (Software Composition Analysis) tests</p> <p>Checks third-party and open-source libraries and frameworks (dependencies of the application). SCA checks for any known vulnerabilities for that dependency and specific version.</p> <p>All of the above are static tests, when the application is not running. But there are security issues that can only be detected when application is running.</p> <p>DAST (Dynamic Application Security Testing) tests</p> <p>Focuses on identifying vulnerabilities in a running application. No knowledge of the internal code or design of application. DAST tools probe an app from outside, just like a potential attacker would. How does the app react to hacking attempts?</p> <p>Image scanning</p> <p>Tools that validate the container image. Scan every image layer for known vulnerabilities. Usage of root user? Vulnerable OS package? Bloated image?</p> <p>Shifting Security Left</p> <p>We start security in pre-commit hook and through all release pipeline. This gives us fast feedback on security issues, and reducing the possibility of issues ending in production.</p>"},{"location":"fundamentals/other-concepts/#platform-engineering","title":"Platform Engineering","text":"<p>Platform engineering is a software engineering discipline focused on the development of self-service toolchains, services, and processes to create an internal developer platform (IDP). The shared IDP can be utilized by software development teams, enabling them to innovate.</p> <p>Platform engineering uses components like configuration management, infrastructure orchestration, and role-based access control to improve reliability. The discipline is associated with DevOps and platform as a service practices.</p> <p>Platform Engineering treats internal developer platforms as a product, applying product management principles to ensure they meet the evolving needs of engineering teams. It focuses on creating and maintaining self-service platforms that provide standardized tools, automated workflows, and infrastructure abstraction. By adopting a platform-as-a-product mindset, platform engineering teams prioritize developer experience, scalability, security, and operational efficiency, ultimately accelerating software delivery across the organization.</p> <p>IDP (Internal Developer Platform) Definition</p> <p>The current definition of the IDP, as outlined by internaldeveloperplatform.org, can be summarized as follows: The IDP is designed to provide a framework and set of tools to support software development within an organization. It encompasses several core components and capabilities, including application configuration management, infrastructure orchestration, environment management, deployment management, and role-based access control. These components collectively contribute to streamlining the software development process, enhancing collaboration, and accelerating the delivery of high-quality applications.</p>"},{"location":"fundamentals/other-concepts/#cloud-engineering","title":"Cloud Engineering","text":"<p>A cloud engineer is an IT professional who builds and maintains cloud infrastructure. Cloud engineers can have more specific roles that include cloud architecting (designing cloud solutions for organizations), development (coding for the cloud), and administration (working with cloud networks).</p> <p>Cloud engineers use virtualization, networking, and security technologies to manage public, private, or hybrid cloud solutions from providers like AWS, Azure, or Google Cloud.</p> <p>Cloud Engineers Responsibilities</p> <ul> <li>Design Cloud Architecture: Plan and create the overall structure of cloud solutions, considering performance, scalability, and cost-efficiency. </li> <li>Develop &amp; Deploy Cloud Applications: Build, test, and deploy software and applications to run on cloud platforms. </li> <li>Manage Infrastructure: Configure and maintain cloud infrastructure, often using Infrastructure as Code (IaC) tools like Terraform. </li> <li>Ensure Security: Implement security protocols, monitor for threats, and manage user access to protect cloud environments and sensitive data. </li> <li>Optimize &amp; Troubleshoot: Monitor performance, manage costs, and troubleshoot issues within the cloud systems to ensure smooth operation and service availability. </li> <li>Automate Processes: Using automation and scripting to streamline cloud deployments and management, often integrating with DevOps practices.</li> </ul>"},{"location":"fundamentals/software-development/","title":"Software Development","text":"<p>Software development is a set of computer science activities that are dedicated to the process of creating, designing, deploying, and supporting software. Software itself is the set of instructions or programs that tell a computer what to do. It is independent of hardware and makes computers programmable.</p>"},{"location":"fundamentals/software-development/#sdlc","title":"SDLC","text":"<p>Software development refers to the design, documentation, programming, testing, and ongoing maintenance of a software deliverable. The combination of these steps are used to create a workflow pipeline, a sequence of steps that when followed produce high-quality software deliverables. This pipeline is known as the `Software Development LifeCycle.</p> <p>CDLC - Software Development LifeCycle</p> <p>1) Discover - Projects are envisioned, designed, and prioritized. A methodology such as agile helps to guide the work process for the project. Practices like DevOps guide practices during development and operations.</p> <p>2) Plan - Stakeholders are identified, budgets set, and infrastructure requisitioned. Design documents from the concept phase are broken down into actionable tasks.</p> <p>3) Build and Test - Development teams work to build production-ready software that meets requirements and feedback. CI/CD pipelines ensure an efficient developer experience. Collaborative code review tools and CI/CD pipelines that plugin to the code review process.</p> <p>4) Deploy - With code written, tested, and merged, it\u2019s time to ship it. Bitbucket\u2019s CI/CD pipelines make deployments as easy as clicking a button. The live production code will need a place to live. Consider using cloud hosting provided by Amazon AWS, Google Cloud Platform, or Microsoft Azure.</p> <p>5) Operate - Support and maintenance are required for active software projects.</p> <p>6) Observe - Incident management is when Development and Operations respond to unplanned events and restore services using reliable methods for prioritizing incidents and getting to resolution fast.</p>"},{"location":"fundamentals/what-is-devops/","title":"What is DevOps","text":"<p>DevOps is a hybrid discipline combining the cross-functional domains of software development and operations into an exceptionally collaborative and productive environment of automation, flexible infrastructures, and maximally efficient workflows and processes.</p> <p>The goal</p> <p>Enhance the software delivery chain at every stage and meet the increasingly tight requirements in today\u2019s competitive industry.</p> <p>DevOps Departments</p> <ul> <li>Development: Developing and testing applications</li> <li>Operations: Deploying and maintaining applications on servers</li> </ul>"},{"location":"fundamentals/what-is-devops/#application-release-process","title":"Application Release Process","text":"<pre><code>Have an idea  \u27a1\ufe0f  Define requirements  \u27a1\ufe0f  Code  \u27a1\ufe0f Test  \u27a1\ufe0f Build and Package\n     \u2b06\ufe0f                                                            \u2b07\ufe0f\nImprovement   \u2b05\ufe0f  Operate and Monitor  \u2b05\ufe0f   Deploy   \u2b05\ufe0f   Configure the Server\n</code></pre> <p>Common DevOps Challenges</p> <ol> <li>Miscommunication &amp; Lack of Collaboration: Developers can\u2019t deploy/run the app, or don\u2019t consider deployment environments; operations may not know how the app works. Poor documentation can worsen this.</li> <li>Conflict of Interest: Developers want rapid changes; operations want stability.</li> <li>Security: Security teams must ensure new features don\u2019t compromise the system (DevSecOps).</li> <li>Application Testing: Testing teams need to cover all levels and environments, but can\u2019t rely solely on automation.</li> <li>Manual Work: Manual configuration and scripting slow down processes and introduce errors.</li> </ol> <p>DevOps Solutions</p> <p>DevOps engineers aim to remove roadblocks by automating and streamlining processes, step by step.</p> <p>How DevOps Achieves This</p> <p>DevOps combines cultural philosophies, practices, and tools to release software faster and with higher quality. The key is frequent collaboration between Dev and Ops teams.</p>"},{"location":"fundamentals/what-is-devops/#devops-lifecycle","title":"DevOps Lifecycle","text":"<ul> <li>Discover \u2013 Explore, organize, and prioritize ideas. Align to strategic goals and customer impact. Agile guides DevOps teams.</li> <li>Plan \u2013 Adopt agile practices for speed and quality. Break work into smaller pieces for incremental value.</li> <li>Code \u2013 Development, source code management, code review</li> <li>Build \u2013 Continuous Integration (CI) tools using version control (e.g., Git) for branching, merging, and workflows in the build process.</li> <li>Test \u2013 Software testing and performance measurement via CI.</li> <li>Package \u2013 Package management, artifact repository, deployment configuration</li> <li>Release \u2013 Change management, version release, automation, releases features frequently and steadily, improving velocity and sustainability.</li> <li>Configure \u2013 Infrastructure definition and management</li> <li>Operate \u2013 Manage end-to-end IT service delivery, including design, deployment, and maintenance.</li> <li>Monitor &amp; Observe \u2013 Continuous monitoring, runtime performance, monitor uptime, speed, and functionality. Notify teams of changes or failures to maintain service.</li> <li>Continuous Delivery (CD) \u2013 Container orchestration, Infrastructure as Code (IAC), Cloud.</li> <li>Continuous Feedback \u2013 Evaluate releases and generate reports to improve future releases and incorporate customer feedback.</li> </ul> <p>Infinity Loop</p> <p>The DevOps lifecycle is often visualized as an infinity loop, symbolizing continuous collaboration and iterative improvement. The eight phases represent processes, capabilities, and tools for development (left side) and operations (right side). Teams collaborate throughout each phase to maintain alignment, velocity, and quality.</p>"},{"location":"fundamentals/what-is-devops/#5-key-devops-principles","title":"5 Key DevOps Principles","text":"<ol> <li>Collaboration: Merge development and operations into a unified team</li> <li>Automation: Automate as much of the lifecycle as possible</li> <li>Continuous Improvement: Experiment, minimize waste, and optimize delivery</li> <li>Customer-Centric Action: Use feedback loops to develop user-focused products</li> <li>Create with the End in Mind: Understand customer needs and build holistic solutions</li> </ol>"},{"location":"fundamentals/what-is-devops/#history-of-devops","title":"History of DevOps","text":"<p>Origins</p> <ul> <li>DevOps emerged between 2007\u20132008 as IT operations and software development communities sought to solve dysfunction in the industry.</li> <li>Traditional software development kept developers and operations separate, leading to siloed teams, long hours, botched releases, and unhappy customers.</li> <li>Thought leaders like Patrick Debois, Gene Kim, and John Willis helped drive the DevOps movement.</li> </ul>"},{"location":"git/","title":"Version Control","text":"<ul> <li>Git</li> <li>GitHub</li> <li>GitLab</li> <li>BitBucket</li> </ul>"},{"location":"git/bitbucket/","title":"BitBucket","text":"<p>Placeholder</p>"},{"location":"git/github/","title":"GitHub","text":"<p>Placeholder</p>"},{"location":"git/gitlab/","title":"Gitlab","text":"<p>Placeholder</p>"},{"location":"programming/","title":"Programming and Scripting","text":"<ol> <li>Bash</li> <li>PowerShell</li> <li>Python</li> <li>Go</li> <li>Ruby</li> <li>JavaScript</li> <li>Groovy</li> </ol>"},{"location":"programming/bash/","title":"Bash Scripting","text":"<p>Placeholder</p>"},{"location":"programming/go/","title":"Go","text":"<p>Placeholder</p>"},{"location":"programming/groovy/","title":"Groovy","text":"<p>Placeholder</p>"},{"location":"programming/javascript/","title":"JavaScript","text":"<p>Placeholder</p>"},{"location":"programming/powershell/","title":"PowerShell","text":"<p>Placeholder</p>"},{"location":"programming/python/","title":"Python","text":"<p>Placeholder</p>"},{"location":"programming/ruby/","title":"Ruby","text":"<p>Placeholder</p>"},{"location":"template/","title":"About Documentation Site Template","text":"<p>Welcome to your MkDocs-powered documentation site, built using MkDocs with the Material theme.</p>"},{"location":"template/documentation-site-template/","title":"Documentation Site Template","text":"<p>Welcome to your MkDocs-powered documentation site! This is the homepage of your documentation built using MkDocs with the Material theme.</p>"},{"location":"template/documentation-site-template/#getting-started","title":"Getting Started","text":""},{"location":"template/documentation-site-template/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have:</p> <ul> <li>Python 3.8 or higher installed</li> <li>Git configured with your repository</li> <li>Basic knowledge of Markdown</li> </ul>"},{"location":"template/documentation-site-template/#quick-setup","title":"Quick Setup","text":"<ol> <li>Clone or download this template</li> <li>Navigate to your project directory</li> <li>Run the setup script: <code>./init_site.sh</code></li> </ol> <p>That\u2019s it! Your documentation site will be built and served locally at <code>http://127.0.0.1:8000</code>.</p>"},{"location":"template/documentation-site-template/#manual-setup-alternative","title":"Manual Setup (Alternative)","text":"<p>If you prefer to set things up manually:</p>"},{"location":"template/documentation-site-template/#1-create-virtual-environment","title":"1. Create Virtual Environment","text":"<pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre>"},{"location":"template/documentation-site-template/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"template/documentation-site-template/#3-configure-your-site","title":"3. Configure Your Site","text":"<p>Edit the configuration files in the <code>mkdocs/</code> directory:</p> Configuration File Description 01-mkdocs-site.yml Basic site information 02-mkdocs-theme.yml Theme and appearance settings 03-mkdocs-extra.yml Social links and extras 04-mkdocs-plugins.yml Plugin configurations 05-mkdocs-extensions.yml Markdown extensions 06-mkdocs-nav.yml Navigation structure"},{"location":"template/documentation-site-template/#4-build-configuration","title":"4. Build Configuration","text":"<pre><code>cat mkdocs/*.yml &gt; mkdocs.yml\n</code></pre>"},{"location":"template/documentation-site-template/#5-start-development-server","title":"5. Start Development Server","text":"<pre><code>mkdocs serve\n</code></pre>"},{"location":"template/documentation-site-template/#adding-and-organizing-content","title":"Adding and Organizing Content","text":""},{"location":"template/documentation-site-template/#creating-new-pages","title":"Creating New Pages","text":"<p>To add content to your documentation:</p> <ol> <li>Create new Markdown files in this <code>Labs/</code> directory</li> <li>Add them to the navigation in <code>mkdocs/06-mkdocs-nav.yml</code></li> </ol> <p>Example navigation entry:</p> <pre><code>nav:\n  - Home: README.md\n  - Getting Started: getting-started.md\n  - Your New Page: your-new-page.md\n</code></pre>"},{"location":"template/documentation-site-template/#content-organization-structure","title":"Content Organization Structure","text":"<p>Here\u2019s how you might organize your documentation:</p> <pre><code>Labs/\n\u251c\u2500\u2500 README.md              # This homepage\n\u251c\u2500\u2500 tutorials/             # Tutorial section\n\u2502   \u251c\u2500\u2500 README.md         # Tutorial overview\n\u2502   \u251c\u2500\u2500 basic-tutorial.md\n\u2502   \u2514\u2500\u2500 advanced-tutorial.md\n\u251c\u2500\u2500 guides/                # How-to guides\n\u2502   \u251c\u2500\u2500 README.md         # Guides overview\n\u2502   \u2514\u2500\u2500 installation-guide.md\n\u251c\u2500\u2500 reference/             # Reference documentation\n\u2502   \u251c\u2500\u2500 README.md         # Reference overview\n\u2502   \u251c\u2500\u2500 api-reference.md\n\u2502   \u2514\u2500\u2500 configuration.md\n\u2514\u2500\u2500 assets/               # Images and other assets\n    \u251c\u2500\u2500 images/\n    \u2502   \u251c\u2500\u2500 logo.png\n    \u2502   \u2514\u2500\u2500 screenshots/\n    \u2514\u2500\u2500 stylesheets/\n</code></pre>"},{"location":"template/documentation-site-template/#adding-images-and-assets","title":"Adding Images and Assets","text":"<ol> <li>Place images in <code>Labs/assets/images/</code></li> <li>Reference them in your Markdown:</li> </ol> <pre><code>![Alt text](assets/images/your-image.png)\n</code></pre> <ol> <li>Add custom stylesheets to the <code>Labs/assets/stylesheets/</code> directory</li> </ol>"},{"location":"template/documentation-site-template/#customization","title":"Customization","text":""},{"location":"template/documentation-site-template/#changing-theme-colors","title":"Changing Theme Colors","text":"<p>Edit <code>mkdocs/02-mkdocs-theme.yml</code> to customize the appearance:</p> <pre><code>theme:\n  palette:\n    primary: blue  # Change to your preferred color\n</code></pre> <p>Available colors: red, pink, purple, deep purple, indigo, blue, light blue, cyan, teal, green, light green, lime, yellow, amber, orange, deep orange, brown, grey, blue grey</p>"},{"location":"template/documentation-site-template/#adding-custom-css","title":"Adding Custom CSS","text":"<ol> <li>Create CSS files in <code>Labs/assets/stylesheets/</code></li> <li>Reference them in <code>mkdocs/03-mkdocs-extra.yml</code>:</li> </ol> <pre><code>extra_css:\n  - ./assets/stylesheets/custom.css\n</code></pre>"},{"location":"template/documentation-site-template/#template-features","title":"Template Features","text":"<p>This documentation template includes many powerful features:</p>"},{"location":"template/documentation-site-template/#markdown-extensions","title":"Markdown Extensions","text":"<ul> <li>Admonitions: Create beautiful callout boxes</li> <li>Code highlighting: Syntax highlighting for code blocks</li> <li>Tables: Enhanced table formatting</li> <li>Mermaid diagrams: Create flowcharts and diagrams</li> <li>Math notation: LaTeX-style mathematical expressions</li> </ul>"},{"location":"template/documentation-site-template/#navigation-features","title":"Navigation Features","text":"<ul> <li>Tabs: Top-level navigation tabs</li> <li>Search: Fast client-side search</li> <li>Table of contents: Automatic TOC generation</li> <li>Navigation sections: Collapsible navigation sections</li> </ul>"},{"location":"template/documentation-site-template/#code-examples","title":"Code Examples","text":"<p>Here\u2019s a code block with syntax highlighting:</p> <pre><code>def hello_world():\n    \"\"\"A simple hello world function.\"\"\"\n    print(\"Hello, World!\")\n    return \"Hello, World!\"\n\n# Call the function\nhello_world()\n</code></pre>"},{"location":"template/documentation-site-template/#admonitions","title":"Admonitions","text":"<p>MkDocs Material supports many different types of admonitions. Here are all the available types:</p> <p>Note</p> <p>This is a note admonition. Use it to highlight important information.</p> <pre><code>!!! note \"Note\"\n    Your content here\n</code></pre> <p>Abstract/Summary/TL;DR</p> <p>This is an abstract admonition. Great for summaries or TL;DR sections.</p> <pre><code>!!! abstract \"Abstract\"\n    Your summary here\n</code></pre> <p>Info/Todo</p> <p>This is an info admonition. Use it for informational content.</p> <pre><code>!!! info \"Info\"\n    Your information here\n</code></pre> <p>Tip/Hint</p> <p>This is a tip admonition. Perfect for sharing helpful hints and best practices!</p> <pre><code>!!! tip \"Tip\"\n    Your helpful tip here\n</code></pre> <p>Success/Check/Done</p> <p>This is a success admonition. Use it to highlight successful outcomes or completed tasks.</p> <pre><code>!!! success \"Success\"\n    Your success message here\n</code></pre> <p>Question/Help/FAQ</p> <p>This is a question admonition. Great for FAQs or help sections.</p> <pre><code>!!! question \"Question\"\n    Your question or FAQ here\n</code></pre> <p>Warning/Caution/Attention</p> <p>This is a warning admonition. Use it to call attention to potential issues.</p> <pre><code>!!! warning \"Warning\"\n    Your warning message here\n</code></pre> <p>Failure/Fail/Missing</p> <p>This is a failure admonition. Use it to highlight failures or missing items.</p> <pre><code>!!! failure \"Failure\"\n    Your failure message here\n</code></pre> <p>Danger/Error</p> <p>This is a danger admonition. Reserve for critical warnings and errors.</p> <pre><code>!!! danger \"Danger\"\n    Your critical warning here\n</code></pre> <p>Bug</p> <p>This is a bug admonition. Perfect for documenting known issues.</p> <pre><code>!!! bug \"Bug\"\n    Your bug description here\n</code></pre> <p>Example</p> <p>This is an example admonition. Use it to provide code examples or demonstrations.</p> <pre><code>!!! example \"Example\"\n    Your example content here\n</code></pre> <p>Quote/Cite</p> <p>This is a quote admonition. Use it for citations or important quotes.</p> <pre><code>!!! quote \"Quote\"\n    Your quote or citation here\n</code></pre>"},{"location":"template/documentation-site-template/#collapsible-admonitions","title":"Collapsible Admonitions","text":"<p>You can make admonitions collapsible by using <code>???</code> instead of <code>!!!</code>:</p> Collapsible Note (Click to expand) <p>This admonition starts collapsed. Users can click to expand it.</p> <pre><code>??? note \"Collapsible Note\"\n    Hidden content here\n</code></pre> Collapsible but Open by Default <p>This admonition is collapsible but starts expanded. Use <code>???+</code> for this behavior.</p> <pre><code>???+ tip \"Open Collapsible\"\n    Content visible by default\n</code></pre>"},{"location":"template/documentation-site-template/#inline-admonitions","title":"Inline Admonitions","text":"<p>You can also create inline admonitions that flow with the text:</p> <p>Inline Info</p> <p>This is an inline admonition that takes up less space.</p> <p>Inline at End</p> <p>This inline admonition is positioned at the end of the line.</p> <p>Regular text continues here, flowing around the inline admonitions above.</p> <pre><code>!!! info inline \"Inline Info\"\n    Inline admonition content\n\n!!! tip inline end \"Inline at End\"  \n    End-positioned inline content\n</code></pre>"},{"location":"template/documentation-site-template/#custom-titles","title":"Custom Titles","text":"<p>You can customize the title or remove it entirely:</p> <p>This admonition has no title - just leave the quotes empty.</p> <p>\ud83c\udf89 Custom Title with Emoji</p> <p>You can use emojis and custom text for titles.</p> <pre><code>!!! warning \"\"\n    No title admonition\n\n!!! success \"\ud83c\udf89 Custom Title with Emoji\"\n    Custom titled content\n</code></pre>"},{"location":"template/documentation-site-template/#mermaid-diagram-example","title":"Mermaid Diagram Example","text":"<p><code>mermaid graph LR     A[Start] --&gt; B{Decision}     B --&gt;|Yes| C[Action 1]     B --&gt;|No| D[Action 2]     C --&gt; E[End]     D --&gt; E</code></p>"},{"location":"template/documentation-site-template/#deployment","title":"Deployment","text":""},{"location":"template/documentation-site-template/#github-pages-recommended","title":"GitHub Pages (Recommended)","text":"<ol> <li>Push your repository to GitHub</li> <li>Enable GitHub Pages in repository settings</li> <li>Use GitHub Actions for automatic deployment</li> </ol>"},{"location":"template/documentation-site-template/#manual-deployment","title":"Manual Deployment","text":"<p>Deploy your site manually using:</p> <pre><code>mkdocs gh-deploy\n</code></pre> <p>This will build and deploy your site to GitHub Pages automatically.</p>"},{"location":"template/documentation-site-template/#next-steps-and-resources","title":"Next Steps and Resources","text":"<ol> <li>Customize the site configuration in the <code>mkdocs/</code> directory</li> <li>Add your own content by creating new Markdown files</li> <li>Update the navigation to reflect your content structure</li> <li>Deploy your site to GitHub Pages or your preferred hosting platform</li> </ol>"},{"location":"template/documentation-site-template/#learning-resources","title":"Learning Resources","text":"<ul> <li>Explore the Material theme documentation</li> <li>Learn about MkDocs plugins</li> <li>Check out Markdown extensions</li> </ul> <p>Happy documenting! \ud83d\udcda\u2728</p>"},{"location":"template/github-avatars-setup/","title":"GitHub Avatars Setup Guide","text":"<p>This guide explains how to add GitHub avatars of committers to your MkDocs site.</p>"},{"location":"template/github-avatars-setup/#overview","title":"Overview","text":"<p>The GitHub avatars feature displays profile pictures of contributors who have committed changes to each page in your documentation. This helps readers see who has worked on specific content.</p>"},{"location":"template/github-avatars-setup/#current-setup","title":"Current Setup","text":"<p>Your MkDocs site is already configured with GitHub avatars! Here\u2019s what\u2019s implemented:</p>"},{"location":"template/github-avatars-setup/#1-plugin-configuration","title":"1. Plugin Configuration","text":"<p>In your <code>mkdocs.yml</code>, the <code>git-committers</code> plugin is configured:</p> <pre><code>plugins:\n  - git-committers:\n      branch: main\n      docs_path: Labs # set if your docs folder is not root\n      enabled: true\n      repository: nirgeier/mkdocs\n</code></pre>"},{"location":"template/github-avatars-setup/#2-template-integration","title":"2. Template Integration","text":"<p>The <code>overrides/partials/source-file.html</code> template includes the <code>render_committers</code> macro that:</p> <ul> <li>Shows up to 4 GitHub avatars per page</li> <li>Displays a \u201c+X\u201d indicator for additional contributors</li> <li>Links avatars to contributor GitHub profiles</li> <li>Shows tooltips with GitHub usernames</li> </ul>"},{"location":"template/github-avatars-setup/#3-css-styling","title":"3. CSS Styling","text":"<p>Custom CSS styles in <code>Labs/assets/stylesheets/theme.css</code> provide:</p> <ul> <li>Circular avatar styling</li> <li>Hover effects with scaling</li> <li>Dark/light mode support</li> <li>Responsive design for mobile devices</li> <li>Tooltip functionality</li> </ul>"},{"location":"template/github-avatars-setup/#features","title":"Features","text":""},{"location":"template/github-avatars-setup/#avatar-display","title":"Avatar Display","text":"<ul> <li>Circular avatars: 1.6rem (25.6px) diameter by default</li> <li>Hover effects: Slight scale animation on hover</li> <li>Tooltips: Show GitHub username on hover</li> <li>Responsive: Smaller on mobile devices</li> </ul>"},{"location":"template/github-avatars-setup/#github-integration","title":"GitHub Integration","text":"<ul> <li>Auto-fetching: Automatically fetches contributor data from GitHub</li> <li>Rate limiting: Handles GitHub API rate limits gracefully</li> <li>Caching: Caches avatar data for performance</li> </ul>"},{"location":"template/github-avatars-setup/#customization-options","title":"Customization Options","text":"<ul> <li>Size variants: Support for larger avatars with <code>.md-source-file--large</code> class</li> <li>Color themes: Automatic adaptation to light/dark themes</li> <li>Border styling: Subtle borders that adapt to the theme</li> </ul>"},{"location":"template/github-avatars-setup/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"template/github-avatars-setup/#adding-github-token","title":"Adding GitHub Token","text":"<p>To avoid API rate limits, you can add a GitHub token:</p> <ol> <li>In mkdocs.yml:</li> </ol> <pre><code>plugins:\n  - git-committers:\n      token: your_github_token_here\n      # ... other config\n</code></pre> <ol> <li>Or as environment variable:</li> </ol> <pre><code>export MKDOCS_GIT_COMMITTERS_APIKEY=your_github_token_here\n</code></pre>"},{"location":"template/github-avatars-setup/#customizing-avatar-count","title":"Customizing Avatar Count","text":"<p>To show more than 4 avatars, modify the template in <code>overrides/partials/source-file.html</code>:</p> <pre><code>{% for author in authors[:6] %}  &lt;!-- Change 4 to 6 for more avatars --&gt;\n</code></pre>"},{"location":"template/github-avatars-setup/#custom-avatar-sizes","title":"Custom Avatar Sizes","text":"<p>Add these CSS classes to customize avatar sizes:</p> <pre><code>/* Large avatars for important pages */\n.md-source-file--large .md-author {\n  height: 3rem;\n  width: 3rem;\n}\n\n/* Small avatars for compact layouts */\n.md-source-file--compact .md-author {\n  height: 1.2rem;\n  width: 1.2rem;\n}\n</code></pre>"},{"location":"template/github-avatars-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"template/github-avatars-setup/#avatars-not-showing","title":"Avatars Not Showing","text":"<ol> <li>Check plugin status: Look for \u201cgit-committers plugin ENABLED\u201d in build output</li> <li>Verify repository: Ensure the repository name in config matches GitHub</li> <li>Check branch: Verify the branch name is correct</li> <li>API limits: Add a GitHub token if you see rate limit warnings</li> </ol>"},{"location":"template/github-avatars-setup/#styling-issues","title":"Styling Issues","text":"<ol> <li>CSS not loading: Verify <code>extra_css</code> path in mkdocs.yml</li> <li>Dark mode: Check that dark mode styles are defined</li> <li>Mobile display: Test responsive behavior on different screen sizes</li> </ol>"},{"location":"template/github-avatars-setup/#example-output","title":"Example Output","text":"<p>When working correctly, you\u2019ll see:</p> <ul> <li>Small circular avatars at the bottom of each page</li> <li>Hover effects when mousing over avatars</li> <li>Clickable links to contributor profiles</li> <li>Proper scaling on different devices</li> </ul>"},{"location":"template/github-avatars-setup/#next-steps","title":"Next Steps","text":"<ol> <li>Test the setup: Visit your site and check avatar display</li> <li>Add GitHub token: To avoid API rate limits</li> <li>Customize styling: Adjust sizes and colors to match your theme</li> <li>Monitor performance: Check build times and API usage</li> </ol> <p>The GitHub avatars feature is now active on your site and will automatically display contributor information for all pages in your documentation!</p>"},{"location":"template/installation-guide/","title":"Installation Guide","text":"<ul> <li>Use the built-in script init-script.md to build the documentation site.</li> </ul>"},{"location":"template/understanding-init-script/","title":"init_site.sh Script","text":"<p>The <code>init_site.sh</code> script is the heart of this MkDocs template\u2019s automation. It intelligently sets up your documentation site by detecting your repository information and configuring everything automatically.</p>"},{"location":"template/understanding-init-script/#script-overview","title":"Script Overview","text":"<p>The script performs a complete setup workflow:</p> <ol> <li>Environment Detection - Identifies your Git repository and GitHub information</li> <li>Configuration Management - Updates MkDocs configuration with your specific details</li> <li>Environment Setup - Creates Python virtual environment and installs dependencies</li> <li>Navigation Building - Generates dynamic navigation based on your content</li> <li>Site Building - Builds and serves your documentation</li> </ol>"},{"location":"template/understanding-init-script/#core-functions-breakdown","title":"Core Functions Breakdown","text":""},{"location":"template/understanding-init-script/#1-git-repository-detection","title":"1. Git Repository Detection","text":"<pre><code>parse_git_remote() {\n    local remote_url\n\n    if ! remote_url=$(git remote get-url origin 2&gt;/dev/null); then\n        print_error \"Could not get git remote URL\"\n        exit 1\n    fi\n\n    # Parse different URL formats:\n    # SSH: git@github.com:owner/repo.git\n    # HTTPS: https://github.com/owner/repo.git\n    if [[ $remote_url =~ git@github\\.com:([^/]+)/([^.]+)\\.git ]]; then\n        REPO_OWNER=\"${BASH_REMATCH[1]}\"\n        REPO_NAME=\"${BASH_REMATCH[2]}\"\n    # ... additional format handling\n}\n</code></pre> <p>What it does: - Extracts GitHub repository information from your Git remote URL - Supports both SSH and HTTPS Git URL formats - Automatically determines repository owner and name - Provides fallback values if parsing fails</p>"},{"location":"template/understanding-init-script/#2-dynamic-url-generation","title":"2. Dynamic URL Generation","text":"<pre><code>generate_urls() {\n    SITE_URL=\"https://${REPO_OWNER}.github.io/${REPO_NAME}/\"\n    REPO_URL=\"https://github.com/${REPO_OWNER}/${REPO_NAME}\"\n}\n</code></pre> <p>What it does: - Generates GitHub Pages URL automatically - Creates repository URL for documentation links - Ensures consistent URL formatting</p>"},{"location":"template/understanding-init-script/#3-configuration-file-updates","title":"3. Configuration File Updates","text":"<pre><code>update_yaml_field_if_empty() {\n    local field_name=\"$1\"\n    local field_value=\"$2\"\n    local config_file=\"$3\"\n\n    if grep -q \"^${field_name}:$\" \"$config_file\"; then\n        sed -i.bak \"s|^${field_name}:$|${field_name}: ${field_value}|g\" \"$config_file\"\n    else\n        print_warning \"$field_name already has a value, skipping\"\n    fi\n}\n</code></pre> <p>What it does: - Only updates empty configuration fields - Preserves existing custom configurations - Creates backup files automatically - Uses safe sed operations for cross-platform compatibility</p>"},{"location":"template/understanding-init-script/#4-modular-configuration-assembly","title":"4. Modular Configuration Assembly","text":"<pre><code>build_mkdocs_config() {\n    print_info \"Building final mkdocs.yml from individual config files...\"\n\n    if ! cat mkdocs/*.yml &gt; mkdocs.yml 2&gt;/dev/null; then\n        print_error \"Failed to concatenate mkdocs config files\"\n        exit 1\n    fi\n}\n</code></pre> <p>What it does: - Combines all modular configuration files into final <code>mkdocs.yml</code> - Maintains separation of concerns (site info, theme, plugins, etc.) - Enables easy customization of individual aspects</p>"},{"location":"template/understanding-init-script/#5-dynamic-navigation-integration","title":"5. Dynamic Navigation Integration","text":"<pre><code>build_dynamic_navigation() {\n    print_info \"Building dynamic navigation structure...\"\n\n    if [[ -f \"build_nav.sh\" ]]; then\n        if ./build_nav.sh --sort numeric; then\n            print_success \"Dynamic navigation built successfully\"\n        else\n            print_warning \"Dynamic navigation build failed, using existing navigation\"\n        fi\n    fi\n}\n</code></pre> <p>What it does: - Automatically generates navigation based on content structure - Uses numeric sorting for ordered content - Gracefully handles navigation build failures - Integrates with the separate navigation builder script</p>"},{"location":"template/understanding-init-script/#configuration-files-logic","title":"Configuration Files Logic","text":"<p>The script works with 6 modular configuration files:</p> Configuration File Category Description <code>01-mkdocs-site.yml</code> Site Basics \u2022 Site name, URL, and description\u2022 Repository information\u2022 Basic metadata <code>02-mkdocs-theme.yml</code> Theme Configuration \u2022 Material theme settings\u2022 Color schemes and palettes\u2022 Navigation features\u2022 Fonts and icons <code>03-mkdocs-extra.yml</code> Extra Features \u2022 Social media links\u2022 GitHub integration buttons\u2022 Custom CSS and JavaScript\u2022 Additional metadata <code>04-mkdocs-plugins.yml</code> Plugin Configuration \u2022 Search functionality\u2022 Git integration plugins\u2022 PDF export capabilities\u2022 Site optimization plugins <code>05-mkdocs-extensions.yml</code> Markdown Extensions \u2022 Code highlighting\u2022 Admonitions and callouts\u2022 Table enhancements\u2022 Diagram support <code>06-mkdocs-nav.yml</code> Navigation Structure \u2022 Site navigation hierarchy\u2022 Page organization\u2022 Menu structure"},{"location":"template/understanding-init-script/#environment-setup-logic","title":"Environment Setup Logic","text":""},{"location":"template/understanding-init-script/#virtual-environment-management","title":"Virtual Environment Management","text":"<pre><code>setup_python_env() {\n    if [[ -d \"$VENV_DIR\" ]]; then\n        print_info \"Virtual environment found, activating...\"\n        source \"$VENV_DIR/bin/activate\"\n    else\n        print_info \"Creating new virtual environment...\"\n        python3 -m venv \"$VENV_DIR\"\n        source \"$VENV_DIR/bin/activate\"\n\n        pip install --upgrade pip\n        pip install -r \"$REQUIREMENTS_FILE\"\n    fi\n}\n</code></pre> <p>Benefits: - Isolated Python environment for your documentation - Automatic dependency installation - Reuses existing environments when available - Upgrades pip to latest version</p>"},{"location":"template/understanding-init-script/#error-handling-and-safety","title":"Error Handling and Safety","text":""},{"location":"template/understanding-init-script/#robust-error-management","title":"Robust Error Management","text":"<pre><code>set -euo pipefail  # Exit on error, undefined vars, pipe failures\n\n# Validation functions\nvalidate_yaml() {\n    # YAML validation with fallbacks\n}\n\n# Cleanup on exit\ncleanup() {\n    if [[ -f \"$TEMP_NAV\" ]]; then\n        rm -f \"$TEMP_NAV\"\n    fi\n}\ntrap cleanup EXIT\n</code></pre> <p>Safety Features: - Strict error handling with immediate exit on failures - Automatic cleanup of temporary files - YAML validation before applying changes - Backup creation before modifications</p>"},{"location":"template/understanding-init-script/#command-line-options","title":"Command Line Options","text":"<p>The script supports several options for different use cases:</p> <pre><code>./init_site.sh                  # Full setup and serve\n./init_site.sh --no-serve       # Setup and build only  \n./init_site.sh --clean          # Clean build and serve\n./init_site.sh --verbose        # Detailed output\n./init_site.sh --help           # Show usage information\n</code></pre>"},{"location":"template/understanding-init-script/#workflow-sequence","title":"Workflow Sequence","text":"<ol> <li>Parse Arguments - Process command line options</li> <li>Load Environment - Source <code>.env</code> file if present</li> <li>Initialize Workspace - Change to Git root directory</li> <li>Parse Git Remote - Extract repository information</li> <li>Generate URLs - Create GitHub Pages and repository URLs</li> <li>Update Configuration - Modify only empty configuration fields</li> <li>Build Configuration - Combine modular config files</li> <li>Build Navigation - Generate dynamic navigation structure</li> <li>Setup Environment - Create/activate Python virtual environment</li> <li>Build Documentation - Generate the documentation site</li> <li>Serve Documentation - Start development server (unless <code>--no-serve</code>)</li> </ol>"},{"location":"template/understanding-init-script/#customization-points","title":"Customization Points","text":""},{"location":"template/understanding-init-script/#environment-variables","title":"Environment Variables","text":"<p>Create a <code>.env</code> file to override defaults:</p> <pre><code>REPO_OWNER=your-username\nREPO_NAME=your-repo-name\nSITE_URL=https://your-custom-domain.com\n</code></pre>"},{"location":"template/understanding-init-script/#configuration-override","title":"Configuration Override","text":"<p>The script only updates empty fields, so you can pre-configure:</p> <pre><code># In mkdocs/01-mkdocs-site.yml\nsite_name: My Custom Site Name  # Won't be overridden\nsite_url:                       # Will be auto-generated\n</code></pre>"},{"location":"template/understanding-init-script/#best-practices","title":"Best Practices","text":"<ol> <li>Run from Git Repository Root - Script validates Git context</li> <li>Commit Changes First - Script assumes clean Git state</li> <li>Review Generated Config - Check <code>mkdocs.yml</code> after first run</li> <li>Test Locally First - Use <code>--no-serve</code> for CI/CD environments</li> <li>Keep Backups - Script creates <code>.backup</code> files automatically</li> </ol>"},{"location":"template/understanding-init-script/#troubleshooting","title":"Troubleshooting","text":""},{"location":"template/understanding-init-script/#common-issues","title":"Common Issues","text":"<p>Git Remote Not Found: <pre><code># Ensure you have a GitHub remote configured\ngit remote add origin https://github.com/username/repo.git\n</code></pre></p> <p>Python Environment Issues: <pre><code># Clear virtual environment and restart\nrm -rf .venv\n./init_site.sh\n</code></pre></p> <p>Configuration Conflicts: <pre><code># Restore from backup\ncp mkdocs/06-mkdocs-nav.yml.backup mkdocs/06-mkdocs-nav.yml\n</code></pre></p> <p>The <code>init_site.sh</code> script embodies the \u201cconvention over configuration\u201d principle, providing intelligent defaults while remaining fully customizable for advanced use cases.</p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>This section contains the core concepts in DevOps methodology.</p>"},{"location":"tutorials/#topics","title":"Topics","text":""},{"location":"tutorials/#containerization","title":"Containerization","text":"<ul> <li>Overview</li> <li>Docker</li> <li>Kubernetes</li> <li>Service Mesh</li> <li>Best Practices</li> </ul>"},{"location":"tutorials/#cicd","title":"CI/CD","text":"<ul> <li>CI/CD Pipelines</li> <li>Continuous Integration</li> <li>Continuous Delivery</li> <li>GitOps</li> <li>CI/CD Tools</li> </ul>"},{"location":"tutorials/#cloud-providers","title":"Cloud Providers","text":"<ul> <li>AWS - Amazon Web Services</li> <li>GCP - Google Cloud Platform</li> <li>Microsoft Azure</li> <li>RedHat OpenShift</li> </ul>"},{"location":"tutorials/#infrastructure-as-code","title":"Infrastructure as Code","text":"<ul> <li>IaC Overview</li> <li>Terraform</li> <li>Ansible</li> <li>Other Tools</li> </ul>"},{"location":"tutorials/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<ul> <li>Overview</li> <li>Prometheus</li> <li>Grafana</li> <li>ELK Stack - ElasticSearch</li> </ul>"},{"location":"tutorials/cicd/","title":"CI/CD","text":"<p>Placeholder</p>"},{"location":"tutorials/cloud-providers/","title":"Cloud Providers","text":"<p>Placeholder</p>"},{"location":"tutorials/containerization/","title":"Containerization","text":"<p>Placeholder</p>"},{"location":"tutorials/iac/","title":"Infrastructure as Code","text":"<p>Placeholder</p>"},{"location":"tutorials/monitoring/","title":"Monitoring &amp; Observability","text":"<p>Placeholder</p>"}]}